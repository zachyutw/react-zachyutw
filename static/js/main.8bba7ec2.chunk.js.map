{"version":3,"sources":["contexts/Global/GlobalContext.js","serviceWorker.js","routes/Routes.js","utils/displayLocalStorageInfo.js","index.js","utils/disabledHoverEffectInMobile.js"],"names":["Context","createContext","Provider","withRouter","props","_useState","useState","_useState2","Object","_Users_po_yingyu_Documents_GitHub_201807Projects_react_zachyutw_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","state","setState","_useState3","_useState4","activedSection","setActiveSection","window","pushG","history","push","replaceG","replace","_onChange","useCallback","e","data","actionType","isIntoView","id","useEffect","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","value","_Users_po_yingyu_Documents_GitHub_201807Projects_react_zachyutw_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","onChange","children","Boolean","location","hostname","match","HomePage","React","lazy","Promise","all","__webpack_require__","then","bind","homeRoute","main","path","name","url","to","Routes","react_default","react_router","react","fallback","assign","component","_xLen","_x","_lsTotal","localStorage","hasOwnProperty","length","console","log","substr","toFixed","displayLocalStorageInfo","document","documentElement","navigator","maxTouchPoints","msMaxTouchPoints","si","styleSheets","styleSheet","rules","ri","selectorText","deleteRule","ex","disabledHoverEffectInMobile","ReactDOM","render","react_router_dom","GlobalContext","routes_Routes","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"mKAIMA,EAAUC,wBAAc,IAEjBC,EAAWC,YAAW,SAAAC,GAAS,IAAAC,EAChBC,mBAAS,IADOC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnCK,EADmCH,EAAA,GAC5BI,EAD4BJ,EAAA,GAAAK,EAECN,mBAAS,gBAFVO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEnCE,EAFmCD,EAAA,GAEnBE,EAFmBF,EAAA,GAI1CG,OAAOC,MAAQb,EAAMc,QAAQC,KAC7BH,OAAOI,SAAWhB,EAAMc,QAAQG,QAChC,IAAMC,EAAYC,sBAAY,SAACC,EAAGC,GAChC,OAAQA,EAAKC,YACX,IAAK,kBACCD,EAAKE,YACPZ,EAAiBU,EAAKG,MAM3B,IASH,OARAC,oBAAU,aAOP,IAEDC,EAAAC,EAAAC,cAAChC,EAAQE,SAAT,CACE+B,MAAKzB,OAAA0B,EAAA,EAAA1B,CAAA,GAAOE,EAAP,CAAcC,WAAUwB,SAAUb,EAAWR,oBAEjDV,EAAMgC,YAaEpC,6LCpCKqC,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,6EChBAC,EAAWC,IAAMC,KAAK,kBAC1BC,QAAAC,IAAA,CAAAC,EAAAtB,EAAA,GAAAsB,EAAAtB,EAAA,KAAAuB,KAAAD,EAAAE,KAAA,aAGWC,EAAY,CACvBC,KAAM,CAAEC,KAAM,YAAaC,KAAM,OAAQC,IAAK,IAAKC,GAAI,MAY1CC,EATA,WACb,OACEC,EAAAzB,EAAAC,cAACyB,EAAA,EAAD,KACED,EAAAzB,EAAAC,cAAC0B,EAAA,SAAD,CAAUC,SAAUH,EAAAzB,EAAAC,cAAA,0BAClBwB,EAAAzB,EAAAC,cAACyB,EAAA,EAADjD,OAAAoD,OAAA,GAAWX,EAAUC,KAArB,CAA2BW,UAAWpB,SCdd,WAC9B,IACEqB,EACAC,EAFEC,EAAW,EAGf,IAAKD,KAAME,aACJA,aAAaC,eAAeH,KAIjCC,GADAF,EAAgD,GAAvCG,aAAaF,GAAII,OAASJ,EAAGI,QAEtCC,QAAQC,IAAIN,EAAGO,OAAO,EAAG,IAAM,OAASR,EAAQ,MAAMS,QAAQ,GAAK,QAErEH,QAAQC,IAAI,YAAcL,EAAW,MAAMO,QAAQ,GAAK,QCD1DC,GCXe,WAQb,GALI,iBAAkBC,SAASC,iBAC3BC,UAAUC,eAAiB,GAC3BD,UAAUE,iBAAmB,EAK/B,IAEE,IAAK,IAAIC,KAAML,SAASM,YAAa,CACnC,IAAIC,EAAaP,SAASM,YAAYD,GACtC,GAAKE,EAAWC,MAEhB,IAAK,IAAIC,EAAKF,EAAWC,MAAMd,OAAS,EAAGe,GAAM,EAAGA,IAC7CF,EAAWC,MAAMC,GAAIC,cAEtBH,EAAWC,MAAMC,GAAIC,aAAa3C,MAAM,WAC1CwC,EAAWI,WAAWF,IAI5B,MAAOG,KDZbC,GACAC,IAASC,OACPhC,EAAAzB,EAAAC,cAACyD,EAAA,EAAD,KACEjC,EAAAzB,EAAAC,cAAC0D,EAAA,EAAD,KACElC,EAAAzB,EAAAC,cAAC2D,EAAD,QAGJlB,SAASmB,eAAe,SH8GpB,kBAAmBjB,WACrBA,UAAUkB,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.8bba7ec2.chunk.js","sourcesContent":["import React, { createContext, useState, useCallback, useEffect } from 'react';\nimport { withRouter } from 'react-router-dom';\n// import _ from 'lodash';\n// import useWindowScroll from '../../hooks/useWindowScroll';\nconst Context = createContext({});\n\nexport const Provider = withRouter(props => {\n  const [state, setState] = useState({});\n  const [activedSection, setActiveSection] = useState('introduction');\n  // const { scrollMoving, wheelEvent } = useWindowScroll(true, 1000);\n  window.pushG = props.history.push;\n  window.replaceG = props.history.replace;\n  const _onChange = useCallback((e, data) => {\n    switch (data.actionType) {\n      case 'sectionIntoView':\n        if (data.isIntoView) {\n          setActiveSection(data.id);\n        }\n        break;\n      default:\n        break;\n    }\n  }, []);\n  useEffect(() => {\n    // window.addEventListener('touchstart', handleOnScroll, detectIt.passiveEvents ? { passive: true } : false);\n    // window.addEventListener('scroll', handleOnScroll, detectIt.passiveEvents ? { passive: true } : false);\n    // return () => {\n    //     window.removeEventListener('touchstart', handleOnScroll);\n    //     window.removeEventListener('scroll', handleOnScroll);\n    // };\n  }, []);\n  return (\n    <Context.Provider\n      value={{ ...state, setState, onChange: _onChange, activedSection }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n});\n\nexport const withContext = Componet => props => {\n  return (\n    <Provider>\n      <Componet {...props} />\n    </Provider>\n  );\n};\n\nexport default Context;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Suspense } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nconst HomePage = React.lazy(() =>\n  import('../components/Pages/HomePage/HomePage')\n);\n\nexport const homeRoute = {\n  main: { path: '/:target?', name: 'home', url: '/', to: '/' }\n};\nexport const navMainFields = [homeRoute];\nconst Routes = () => {\n  return (\n    <Switch>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Route {...homeRoute.main} component={HomePage} />\n      </Suspense>\n    </Switch>\n  );\n};\nexport default Routes;\n","const displayLocalStorageInfo = () => {\n  let _lsTotal = 0,\n    _xLen,\n    _x;\n  for (_x in localStorage) {\n    if (!localStorage.hasOwnProperty(_x)) {\n      continue;\n    }\n    _xLen = (localStorage[_x].length + _x.length) * 2;\n    _lsTotal += _xLen;\n    console.log(_x.substr(0, 50) + ' = ' + (_xLen / 1024).toFixed(2) + ' KB');\n  }\n  console.log('Total = ' + (_lsTotal / 1024).toFixed(2) + ' KB');\n};\n\nexport default displayLocalStorageInfo;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport './index.scss';\nimport { Provider as GlobalProvider } from './contexts/Global/GlobalContext';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport Routes from './routes/Routes';\nimport disabledHoverEffectInMobile from './utils/disabledHoverEffectInMobile';\nimport displayLocalStorageInfo from './utils/displayLocalStorageInfo';\ndisplayLocalStorageInfo();\ndisabledHoverEffectInMobile();\nReactDOM.render(\n  <BrowserRouter>\n    <GlobalProvider>\n      <Routes />\n    </GlobalProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default () => {\n  const hasTouch = () => {\n    return (\n      'ontouchstart' in document.documentElement ||\n      navigator.maxTouchPoints > 0 ||\n      navigator.msMaxTouchPoints > 0\n    );\n  };\n  if (hasTouch()) {\n    // remove all :hover stylesheets\n    try {\n      // prevent exception on browsers not supporting DOM styleSheets properly\n      for (var si in document.styleSheets) {\n        var styleSheet = document.styleSheets[si];\n        if (!styleSheet.rules) continue;\n\n        for (var ri = styleSheet.rules.length - 1; ri >= 0; ri--) {\n          if (!styleSheet.rules[ri].selectorText) continue;\n\n          if (styleSheet.rules[ri].selectorText.match(':hover')) {\n            styleSheet.deleteRule(ri);\n          }\n        }\n      }\n    } catch (ex) {}\n  }\n};\n"],"sourceRoot":""}